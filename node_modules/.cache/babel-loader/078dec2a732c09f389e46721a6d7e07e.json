{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _email_input = require('../../ui/input/email_input');\nvar _email_input2 = _interopRequireDefault(_email_input);\nvar _index = require('../index');\nvar c = _interopRequireWildcard(_index);\nvar _index2 = require('../../store/index');\nvar _index3 = require('../../core/index');\nvar l = _interopRequireWildcard(_index3);\nvar _email = require('../email');\nvar _avatar = require('../../avatar');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar EmailPane = function (_React$Component) {\n  _inherits(EmailPane, _React$Component);\n  function EmailPane() {\n    _classCallCheck(this, EmailPane);\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n  EmailPane.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n      lock = _props.lock,\n      strictValidation = _props.strictValidation;\n    if (l.ui.avatar(lock) && c.email(lock)) {\n      (0, _avatar.requestAvatar)(l.id(lock), c.email(lock));\n    }\n    (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _email.setEmail, c.email(lock), strictValidation);\n  };\n  EmailPane.prototype.handleChange = function handleChange(e) {\n    var _props2 = this.props,\n      lock = _props2.lock,\n      strictValidation = _props2.strictValidation;\n    if (l.ui.avatar(lock)) {\n      (0, _avatar.debouncedRequestAvatar)(l.id(lock), e.target.value);\n    }\n    (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _email.setEmail, e.target.value, strictValidation);\n  };\n  EmailPane.prototype.render = function render() {\n    var _props3 = this.props,\n      i18n = _props3.i18n,\n      lock = _props3.lock,\n      placeholder = _props3.placeholder,\n      _props3$forceInvalidV = _props3.forceInvalidVisibility,\n      forceInvalidVisibility = _props3$forceInvalidV === undefined ? false : _props3$forceInvalidV;\n    var allowAutocomplete = l.ui.allowAutocomplete(lock);\n    var field = c.getField(lock, 'email');\n    var value = field.get('value', '');\n    var valid = field.get('valid', true);\n\n    // TODO: invalidErrorHint and blankErrorHint are deprecated.\n    // They are kept for backwards compatibility in the code for the customers overwriting\n    // them with languageDictionary. They can be removed in the next major release.\n    var errMessage = value ? i18n.str('invalidErrorHint') || i18n.str('invalidEmailErrorHint') : i18n.str('blankErrorHint') || i18n.str('blankEmailErrorHint');\n    var invalidHint = field.get('invalidHint') || errMessage;\n    var isValid = (!forceInvalidVisibility || valid) && !c.isFieldVisiblyInvalid(lock, 'email');\n    // Hide the error message for the blank email in Enterprise HRD only mode when the password field is hidden.\n    isValid = forceInvalidVisibility && value === '' ? true : isValid;\n    return _react2.default.createElement(_email_input2.default, {\n      lockId: l.id(lock),\n      value: value,\n      invalidHint: invalidHint,\n      isValid: isValid,\n      onChange: this.handleChange.bind(this),\n      placeholder: placeholder,\n      autoComplete: allowAutocomplete,\n      disabled: l.submitting(lock)\n    });\n  };\n  return EmailPane;\n}(_react2.default.Component);\nexports.default = EmailPane;\nEmailPane.propTypes = {\n  i18n: _propTypes2.default.object.isRequired,\n  lock: _propTypes2.default.object.isRequired,\n  placeholder: _propTypes2.default.string.isRequired,\n  strictValidation: _propTypes2.default.bool.isRequired\n};","map":null,"metadata":{},"sourceType":"script"}